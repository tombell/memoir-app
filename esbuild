#!/usr/bin/env node

const fs = require("fs");
const http = require("http");

const chokidar = require("chokidar");
const debounce = require("lodash.debounce");
const esbuild = require("esbuild");
const sass = require("node-sass");

const buildCSS = ({ src, dest, dev }) => {
  const compile = () => {
    sass.render(
      {
        file: src,
        outputStyle: dev ? "expanded" : "compressed",
      },
      (err, result) => {
        if (err) {
          console.error(`build scss errored: ${err}`);
          console.dir(err);
          return;
        }

        fs.writeFileSync(dest, result.css);
        console.error("build scss successful");
      }
    );
  };

  compile();

  if (dev) {
    chokidar
      .watch("src/styles/**/*.scss")
      .on("change", debounce(compile, 250));
  }
};

const buildJS = ({ src, dest, dev }) => {
  try {
    esbuild.build({
      entryPoints: [src],
      outfile: dest,
      bundle: true,
      minify: !dev,
      watch: {
        onRebuild(err, result) {
          err
            ? console.error(`build js errored: ${err}`)
            : console.error("build js successful");
        },
      },
      define: {
        MEMOIR_ADMIN_ENABLED: `"${dev}"`,
        MEMOIR_API_KEY: dev ? `${process.env.MEMOIR_API_KEY}` : '""',
        MEMOIR_API_URL: dev
          ? '"http://localhost:8080"'
          : '"https://api.iamdjriff.co.uk"',
        MEMOIR_CDN_URL: '"https://d2a0hkcquufay7.cloudfront.net"',
      },
    });
  } catch {}
};

const serve = async (servedir, listen) => {
  const { host, port } = await esbuild.serve({ servedir }, {});

  const proxy = http.createServer((req, res) => {
    const forwardRequest = (path) => {
      const options = {
        hostname: host,
        port,
        path,
        method: req.method,
        headers: req.headers,
      };

      const proxyReq = http.request(options, (proxyRes) => {
        if (proxyRes.statusCode === 404) {
          return forwardRequest("/");
        }

        res.writeHead(proxyRes.statusCode, proxyRes.headers);
        proxyRes.pipe(res, { end: true });
      });

      req.pipe(proxyReq, { end: true });
    };

    forwardRequest(req.url);
  });

  proxy.listen(listen);
};

const dev = process.argv[2] !== "--prod";

buildCSS({
  src: "src/styles/styles.scss",
  dest: "public/styles.css",
  dev,
});

buildJS({
  src: "src/index.tsx",
  dest: "public/app.js",
  dev,
});

if (dev) {
  serve("public", 10001);
  console.error("listening on http://localhost:10001");
}
